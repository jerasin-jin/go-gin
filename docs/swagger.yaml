definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.ProductCategory:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    required:
    - name
    type: object
  model.User:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      fullname:
        type: string
      id:
        type: integer
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    required:
    - fullname
    - password
    - username
    type: object
  request.LoginRequest:
    properties:
      password:
        example: "1234"
        type: string
      username:
        example: admin
        type: string
    required:
    - password
    - username
    type: object
  request.ProductCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  request.TokenReqBody:
    properties:
      refresh_token:
        type: string
    type: object
  request.UserRequest:
    properties:
      avatar:
        example: admin
        type: string
      fullname:
        example: admin test
        type: string
      password:
        example: "1234"
        type: string
      username:
        example: admin
        type: string
    required:
    - fullname
    - password
    - username
    type: object
  response.User:
    properties:
      avatar:
        type: string
      fullName:
        description: Password string `json:"password"`
        type: string
      username:
        type: string
    type: object
  response.UserPagination:
    properties:
      data:
        items:
          $ref: '#/definitions/response.User'
        type: array
      page:
        type: integer
      pageSize:
        type: integer
      response_key:
        type: string
      response_message:
        type: string
      totalPage:
        type: integer
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      description: Login
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: Login
      tags:
      - Auth
  /auth/refresh/token:
    post:
      description: RefreshToken
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.TokenReqBody'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: RefreshToken
      tags:
      - Auth
  /auth/register:
    post:
      description: Register
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UserRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: Register
      tags:
      - Auth
  /product/category:
    get:
      description: Get List Product Category
      parameters:
      - description: int valid
        in: query
        name: page
        type: integer
      - description: int valid
        in: query
        name: pageSize
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProductCategory'
      security:
      - Bearer: []
      summary: Get List product category
      tags:
      - Product Category
    post:
      description: Create Product Category
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ProductCategoryRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProductCategory'
      security:
      - Bearer: []
      summary: Create product category
      tags:
      - Product Category
  /user:
    get:
      description: Get List users
      parameters:
      - description: int valid
        in: query
        name: page
        type: integer
      - description: int valid
        in: query
        name: pageSize
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserPagination'
      security:
      - Bearer: []
      summary: Get List users
      tags:
      - User
    post:
      description: Create user
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UserRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - Bearer: []
      summary: Create user
      tags:
      - User
  /user/{userID}:
    delete:
      description: Update user By Id
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - Bearer: []
      summary: Update user By Id
      tags:
      - User
    get:
      description: Get user By Id
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - Bearer: []
      summary: Get user By Id
      tags:
      - User
    put:
      description: Update user By Id
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UserRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - Bearer: []
      summary: Update user By Id
      tags:
      - User
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
