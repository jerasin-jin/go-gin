// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package module

import (
	"github.com/Jerasin/app/controller"
	"github.com/Jerasin/app/repository"
	"github.com/Jerasin/app/service"
	"github.com/Jerasin/app/util"
	"github.com/google/wire"
)

// Injectors from auth_injector.go:

func AuthModuleInit() *AuthModule {
	gormDB := util.InitDbClient()
	userRepository := repository.UserRepositoryInit(gormDB)
	authServiceModel := service.AuthServiceInit(userRepository)
	authController := controller.AuthControllerInit(authServiceModel)
	authModule := NewAuthModule(authController, authServiceModel, userRepository)
	return authModule
}

// Injectors from product_category_injector.go:

func ProductCategoryModuleInit() *ProductCategoryModule {
	gormDB := util.InitDbClient()
	productCategoryRepository := repository.ProductCategoryRepositoryInit(gormDB)
	productCategoryServiceModel := service.ProductCategoryServiceInit(productCategoryRepository)
	productCategoryController := controller.ProductCategoryControllerInit(productCategoryServiceModel)
	productCategoryModule := NewProductCategoryModule(productCategoryController, productCategoryServiceModel, productCategoryRepository)
	return productCategoryModule
}

// Injectors from user_injector.go:

func UserModuleInit() *UserModule {
	gormDB := util.InitDbClient()
	userRepository := repository.UserRepositoryInit(gormDB)
	userServiceModel := service.UserServiceInit(userRepository)
	userController := controller.UserControllerInit(userServiceModel)
	userModule := NewUserModule(userRepository, userServiceModel, userController)
	return userModule
}

// auth_injector.go:

var authSvcSet = wire.NewSet(service.AuthServiceInit, wire.Bind(new(service.AuthServiceInterface), new(*service.AuthServiceModel)))

var authCtrlSet = wire.NewSet(controller.AuthControllerInit, wire.Bind(new(controller.AuthControllerInterface), new(*controller.AuthController)))

type AuthModule struct {
	AuthCtrl controller.AuthControllerInterface
	AuthSvc  service.AuthServiceInterface
	UserRepo repository.UserRepositoryInterface
}

func NewAuthModule(
	authCtrl controller.AuthControllerInterface,
	authSvc service.AuthServiceInterface,
	userRepo repository.UserRepositoryInterface,
) *AuthModule {
	return &AuthModule{
		AuthSvc:  authSvc,
		AuthCtrl: authCtrl,
		UserRepo: userRepo,
	}
}

// product_category_injector.go:

var productCategorySvcSet = wire.NewSet(service.ProductCategoryServiceInit, wire.Bind(new(service.ProductCategoryServiceInterface), new(*service.ProductCategoryServiceModel)))

var productCategoryCtrlSet = wire.NewSet(controller.ProductCategoryControllerInit, wire.Bind(new(controller.ProductCategoryControllerInterface), new(*controller.ProductCategoryController)))

var productCategoryRepoSet = wire.NewSet(repository.ProductCategoryRepositoryInit, wire.Bind(new(repository.ProductCategoryRepositoryInterface), new(*repository.ProductCategoryRepository)))

type ProductCategoryModule struct {
	ProductCategoryCtrl controller.ProductCategoryControllerInterface
	ProductCategorySvc  service.ProductCategoryServiceInterface
	ProductCategoryRepo repository.ProductCategoryRepositoryInterface
}

func NewProductCategoryModule(
	productCategoryCtrl controller.ProductCategoryControllerInterface,
	productCategorySvc service.ProductCategoryServiceInterface,
	productCategoryRepo repository.ProductCategoryRepositoryInterface,
) *ProductCategoryModule {
	return &ProductCategoryModule{
		ProductCategoryCtrl: productCategoryCtrl,
		ProductCategorySvc:  productCategorySvc,
		ProductCategoryRepo: productCategoryRepo,
	}
}

// user_injector.go:

var db = wire.NewSet(util.InitDbClient)

var userServiceSet = wire.NewSet(service.UserServiceInit, wire.Bind(new(service.UserServiceInterface), new(*service.UserServiceModel)))

var userCtrlSet = wire.NewSet(controller.UserControllerInit, wire.Bind(new(controller.UserControllerInterface), new(*controller.UserController)))

var userRepoSet = wire.NewSet(repository.UserRepositoryInit, wire.Bind(new(repository.UserRepositoryInterface), new(*repository.UserRepository)))

type UserModule struct {
	UserRepo repository.UserRepositoryInterface
	UserSvc  service.UserServiceInterface
	UserCtrl controller.UserControllerInterface
}

func NewUserModule(userRepo repository.UserRepositoryInterface,
	userService service.UserServiceInterface,
	userCtrl controller.UserControllerInterface,
) *UserModule {
	return &UserModule{
		UserRepo: userRepo,
		UserSvc:  userService,
		UserCtrl: userCtrl,
	}
}
