// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package module

import (
	"github.com/Jerasin/app/controller"
	"github.com/Jerasin/app/repository"
	"github.com/Jerasin/app/service"
	"github.com/Jerasin/app/util"
	"github.com/google/wire"
)

// Injectors from auth_injector.go:

func AuthModuleInit() *AuthModule {
	gormDB := util.InitDbClient()
	baseRepository := repository.BaseRepositoryInit(gormDB)
	userRepository := repository.UserRepositoryInit(baseRepository)
	userServiceModel := service.UserServiceInit(baseRepository, userRepository)
	authServiceModel := service.AuthServiceInit(baseRepository, userRepository, userServiceModel)
	authController := controller.AuthControllerInit(authServiceModel)
	authModule := NewAuthModule(authController, authServiceModel, userRepository, userServiceModel)
	return authModule
}

// Injectors from order_injector.go:

func OrderModuleInit() *OrderModule {
	gormDB := util.InitDbClient()
	baseRepository := repository.BaseRepositoryInit(gormDB)
	orderServiceModel := service.OrderServiceInit(baseRepository)
	orderController := controller.OrderControllerInit(orderServiceModel)
	orderModule := NewOrderModule(orderServiceModel, orderController)
	return orderModule
}

// Injectors from product_category_injector.go:

func ProductCategoryModuleInit() *ProductCategoryModule {
	gormDB := util.InitDbClient()
	baseRepository := repository.BaseRepositoryInit(gormDB)
	productCategoryRepository := repository.ProductCategoryRepositoryInit(baseRepository)
	productCategoryServiceModel := service.ProductCategoryServiceInit(baseRepository, productCategoryRepository)
	productCategoryController := controller.ProductCategoryControllerInit(productCategoryServiceModel)
	productCategoryModule := NewProductCategoryModule(productCategoryController, productCategoryServiceModel, productCategoryRepository)
	return productCategoryModule
}

// Injectors from product_injector.go:

func ProductModuleInit() *ProductModule {
	gormDB := util.InitDbClient()
	baseRepository := repository.BaseRepositoryInit(gormDB)
	productRepository := repository.ProductRepositoryInit(baseRepository)
	productServiceModel := service.ProductServiceInit(productRepository, baseRepository)
	productController := controller.ProductControllerInit(productServiceModel)
	productModule := NewProductModule(productRepository, productServiceModel, productController)
	return productModule
}

// Injectors from user_injector.go:

func UserModuleInit() *UserModule {
	gormDB := util.InitDbClient()
	baseRepository := repository.BaseRepositoryInit(gormDB)
	userRepository := repository.UserRepositoryInit(baseRepository)
	userServiceModel := service.UserServiceInit(baseRepository, userRepository)
	userController := controller.UserControllerInit(userServiceModel)
	userModule := NewUserModule(userRepository, userServiceModel, userController)
	return userModule
}

// auth_injector.go:

var authSvcSet = wire.NewSet(service.AuthServiceInit, wire.Bind(new(service.AuthServiceInterface), new(*service.AuthServiceModel)))

var authCtrlSet = wire.NewSet(controller.AuthControllerInit, wire.Bind(new(controller.AuthControllerInterface), new(*controller.AuthController)))

type AuthModule struct {
	AuthCtrl controller.AuthControllerInterface
	AuthSvc  service.AuthServiceInterface
	UserRepo repository.UserRepositoryInterface
	UserSvc  service.UserServiceInterface
}

func NewAuthModule(
	authCtrl controller.AuthControllerInterface,
	authSvc service.AuthServiceInterface,
	userRepo repository.UserRepositoryInterface,
	userSvc service.UserServiceInterface,
) *AuthModule {
	return &AuthModule{
		AuthSvc:  authSvc,
		AuthCtrl: authCtrl,
		UserRepo: userRepo,
		UserSvc:  userSvc,
	}
}

// order_injector.go:

var OrderSvcSet = wire.NewSet(service.OrderServiceInit, wire.Bind(new(service.OrderServiceInterface), new(*service.OrderServiceModel)))

var OrderCtrlSet = wire.NewSet(controller.OrderControllerInit, wire.Bind(new(controller.OrderControllerInterface), new(*controller.OrderController)))

type OrderModule struct {
	// OrderRepo repository.OrderRepositoryInterface
	OrderSvc  service.OrderServiceInterface
	OrderCtrl controller.OrderControllerInterface
}

func NewOrderModule(

	OrderService service.OrderServiceInterface,
	OrderCtrl controller.OrderControllerInterface,
) *OrderModule {
	return &OrderModule{

		OrderSvc:  OrderService,
		OrderCtrl: OrderCtrl,
	}
}

// product_category_injector.go:

var productCategorySvcSet = wire.NewSet(service.ProductCategoryServiceInit, wire.Bind(new(service.ProductCategoryServiceInterface), new(*service.ProductCategoryServiceModel)))

var productCategoryCtrlSet = wire.NewSet(controller.ProductCategoryControllerInit, wire.Bind(new(controller.ProductCategoryControllerInterface), new(*controller.ProductCategoryController)))

var productCategoryRepoSet = wire.NewSet(repository.ProductCategoryRepositoryInit, wire.Bind(new(repository.ProductCategoryRepositoryInterface), new(*repository.ProductCategoryRepository)))

type ProductCategoryModule struct {
	ProductCategoryCtrl controller.ProductCategoryControllerInterface
	ProductCategorySvc  service.ProductCategoryServiceInterface
	ProductCategoryRepo repository.ProductCategoryRepositoryInterface
}

func NewProductCategoryModule(
	productCategoryCtrl controller.ProductCategoryControllerInterface,
	productCategorySvc service.ProductCategoryServiceInterface,
	productCategoryRepo repository.ProductCategoryRepositoryInterface,
) *ProductCategoryModule {
	return &ProductCategoryModule{
		ProductCategoryCtrl: productCategoryCtrl,
		ProductCategorySvc:  productCategorySvc,
		ProductCategoryRepo: productCategoryRepo,
	}
}

// product_injector.go:

var productSvcSet = wire.NewSet(service.ProductServiceInit, wire.Bind(new(service.ProductServiceInterface), new(*service.ProductServiceModel)))

var productCtrlSet = wire.NewSet(controller.ProductControllerInit, wire.Bind(new(controller.ProductControllerInterface), new(*controller.ProductController)))

var productRepoSet = wire.NewSet(repository.ProductRepositoryInit, wire.Bind(new(repository.ProductRepositoryInterface), new(*repository.ProductRepository)))

type ProductModule struct {
	ProductRepo repository.ProductRepositoryInterface
	ProductSvc  service.ProductServiceInterface
	ProductCtrl controller.ProductControllerInterface
}

func NewProductModule(productRepo repository.ProductRepositoryInterface,
	productService service.ProductServiceInterface,
	productCtrl controller.ProductControllerInterface,
) *ProductModule {
	return &ProductModule{
		ProductRepo: productRepo,
		ProductSvc:  productService,
		ProductCtrl: productCtrl,
	}
}

// user_injector.go:

var userServiceSet = wire.NewSet(service.UserServiceInit, wire.Bind(new(service.UserServiceInterface), new(*service.UserServiceModel)))

var userCtrlSet = wire.NewSet(controller.UserControllerInit, wire.Bind(new(controller.UserControllerInterface), new(*controller.UserController)))

var userRepoSet = wire.NewSet(repository.UserRepositoryInit, wire.Bind(new(repository.UserRepositoryInterface), new(*repository.UserRepository)))

type UserModule struct {
	UserRepo repository.UserRepositoryInterface
	UserSvc  service.UserServiceInterface
	UserCtrl controller.UserControllerInterface
}

func NewUserModule(userRepo repository.UserRepositoryInterface,
	userService service.UserServiceInterface,
	userCtrl controller.UserControllerInterface,
) *UserModule {
	return &UserModule{
		UserRepo: userRepo,
		UserSvc:  userService,
		UserCtrl: userCtrl,
	}
}
